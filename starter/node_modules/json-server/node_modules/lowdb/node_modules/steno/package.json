{
  "name": "steno",
  "version": "0.3.2",
  "description": "Fast non-blocking file writer for Node",
  "main": "index.js",
  "scripts": {
    "test": "node test | tap-dot",
    "prepush": "npm test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/typicode/steno.git"
  },
  "keywords": [
    "file",
    "write",
    "writer",
    "asynchronous",
    "synchronous",
    "race",
    "condition",
    "safe"
  ],
  "author": {
    "name": "typicode"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/typicode/steno/issues"
  },
  "homepage": "https://github.com/typicode/steno",
  "devDependencies": {
    "husky": "^0.6.2",
    "tap-dot": "^0.2.3",
    "tape": "^3.0.1"
  },
  "readme": "# steno [![](https://badge.fury.io/js/steno.svg)](http://badge.fury.io/js/steno) [![](https://travis-ci.org/typicode/steno.svg?branch=master)](https://travis-ci.org/typicode/steno)\n\n> Fast and safe file writer that prevents race condition\n\n```javascript\nvar steno = require('steno')\nsteno('file.txt').write('data')\n```\n\n## Example\n\nIf you need to write to file, you either use `writeFileSync` or `writeFile`. The first is blocking and the second doesn't prevent race condition.\n\nFor example:\n\n```javascript\n// Very slow but file's content will always be 10000\nfor (var i = 0; i <= 10000; i++) {\n  fs.writeFileSync('file.txt', i)\n}\n```\n\n```javascript\n// Very fast but file's content may be 5896, 2563, 9856, ...\nfor (var i = 0; i <= 10000; i++) {\n  fs.writeFile('file.txt', i, function() {})\n}\n```\n\nWith steno:\n\n```javascript\n// Very fast and file's content will always be 10000\nfor (var i = 0; i <= 10000; i++) {\n  steno('file.txt').write(i)\n}\n```\n\nRace condition is prevented and it runs in `2ms` versus `~5500ms` with `fs.writeFileSync`.\n\n## How it works\n\n```javascript\nsteno('file.txt').write('A') // starts writing A to file\nsteno('file.txt').write('B') // still writing A, B is buffered\nsteno('file.txt').write('C') // still writing A, B is replaced by C\n                             // ...\n                             // A has been written to file\n                             // starts writting C (B has been skipped)\n```\n\nWhen file is being written, data is stored in memory and flushed to disk as soon as possible. Please note also that steno skips intermediate data (B in this example) and assumes to be run in a single process.\n\n## Methods\n\n__steno(filename)__\n\nReturns writer for filename.\n\n__writer.write(data, [cb])__\n\nWrites data to file. If file is already being written, data is buffered until it can be written.\n\n```javascript\nsteno('file.txt').write('data')\n```\n\nAn optional callback can be set to be notified when data has been flushed.\n\n```javascript\nfunction w(data) {\n  steno('file.txt').write(data, function(err) {\n    if (err) throw err\n    console.log('OK')\n  })\n}\n\nw('A')\nw('B')\nw('C')\n\n// OK\n// OK\n// OK\n```\n\n__writer.setCallback(cb)__\n\nSets a writer level callback that is called __only__ after file has been written. Useful for creating atomic writers, logging, delaying, ...\n\n```javascript\nvar atomicWriter = steno('tmp.txt').setCallback(function(err, data, next) {\n  if (err) throw err\n  fs.rename('tmp.txt', 'file.txt', function(err) {\n    if (err) throw err\n    console.log('OK')\n    next()\n  })\n})\n\natomicWriter.write('A')\natomicWriter.write('B')\natomicWriter.write('C')\n\n// OK\n// OK\n\n// File has been actually written twice\n```\n\n## License\n\nMIT - [Typicode](https://github.com/typicode)\n",
  "readmeFilename": "README.md",
  "_id": "steno@0.3.2",
  "_from": "steno@^0.3.2"
}
