{
  "name": "json-server",
  "version": "0.7.2",
  "description": "Serves JSON files through REST routes.",
  "main": "./src/index.js",
  "bin": {
    "json-server": "./bin/index.js"
  },
  "directories": {
    "test": "test"
  },
  "dependencies": {
    "body-parser": "^1.8.1",
    "chalk": "^0.4.0",
    "cors": "^2.3.0",
    "errorhandler": "^1.2.0",
    "express": "^4.9.5",
    "got": "^1.2.2",
    "lowdb": "^0.7.1",
    "method-override": "^2.1.2",
    "morgan": "^1.3.1",
    "node-uuid": "^1.4.2",
    "serve-static": "^1.6.1",
    "superagent": "^0.15.7",
    "underscore": "^1.5.2",
    "underscore-db": "^0.8.0",
    "underscore.inflections": "~0.2.1",
    "update-notifier": "^0.2.2",
    "yargs": "^1.3.1"
  },
  "devDependencies": {
    "husky": "^0.6.1",
    "mocha": "^2.2.4",
    "supertest": "~0.8.1"
  },
  "scripts": {
    "test": "mocha -R spec test",
    "start": "node server.js",
    "prepush": "npm t"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/typicode/json-server.git"
  },
  "keywords": [
    "JSON",
    "server",
    "fake",
    "REST",
    "API",
    "prototyping",
    "mock",
    "mocking",
    "test",
    "testing",
    "rest",
    "data",
    "dummy",
    "sandbox"
  ],
  "author": {
    "name": "Typicode",
    "email": "typicode@gmail.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/typicode/json-server/issues"
  },
  "homepage": "https://github.com/typicode/json-server",
  "readme": "# JSON Server [![](https://travis-ci.org/typicode/json-server.svg)](https://travis-ci.org/typicode/json-server) [![](https://badge.fury.io/js/json-server.svg)](http://badge.fury.io/js/json-server)\n\n> Get a full fake REST API with __zero coding__ in __less than 30 seconds__ (seriously)\n\nCreated with <3 for front-end developers who need a quick back-end for prototyping and mocking.\n\nFor a live running version, see [JSONPlaceholder](http://jsonplaceholder.typicode.com).\n\n## Example\n\nCreate a `db.json` file\n\n```javascript\n{\n  \"posts\": [\n    { \"id\": 1, \"title\": \"json-server\", \"author\": \"typicode\" }\n  ],\n  \"comments\": [\n    { \"id\": 1, \"body\": \"some comment\", \"postId\": 1 }\n  ]\n}\n```\n\nStart JSON Server\n\n```bash\n$ json-server db.json\n```\n\nNow if you go to [http://localhost:3000/posts/1](), you'll get\n\n```javascript\n{ \"id\": 1, \"title\": \"json-server\", \"author\": \"typicode\" }\n```\n\nAlso, if you make POST, PUT, PATCH or DELETE requests, changes will be saved to `db.json`\n\n## Routes\n\nHere are all the available routes.\n\n```\nGET   /posts\nGET   /posts/1\nGET   /posts/1/comments\nGET   /posts?title=json-server&author=typicode\nPOST  /posts\nPUT   /posts/1\nPATCH /posts/1\nDEL   /posts/1\n```\n\nTo slice resources, add `_start` and `_end`. An `X-Total-Count` header is included in the response.\n\n```\nGET /posts?_start=0&_end=10\nGET /posts/1/comments?_start=0&_end=10\n```\n\nTo sort resources, add `_sort` and `_order` (ascending order by default).\n\n```\nGET /posts?_sort=views&_order=DESC\nGET /posts/1/comments?_sort=votes&_order=ASC\n```\n\nTo make a full-text search on resources, add `q`.\n\n```\nGET /posts?q=internet\n```\n\nReturns database.\n\n```\nGET /db\n```\n\nReturns default index file or serves `./public` directory.\n\n```\nGET /\n```\n\n## Install\n\n```bash\n$ npm install -g json-server\n```\n\n## Extras\n\n### Static file server\n\nYou can use JSON Server to serve your HTML, JS and CSS, simply create a `./public` directory.\n\n### Access from anywhere\n\nYou can access your fake API from anywhere using CORS and JSONP.\n\n### Remote schema\n\nYou can load remote schemas:\n\n```bash\n$ json-server http://example.com/file.json\n$ json-server http://jsonplaceholder.typicode.com/db\n```\n\n### JS file support\n\nYou can use JS to programmatically create data:\n\n```javascript\nmodule.exports = function() {\n  data = { users: [] }\n  // Create 1000 users\n  for (var i = 0; i < 1000; i++) {\n    data.users.push({ name: 'user' + i })\n  }\n  return data\n}\n```\n\n```bash\n$ json-server index.js\n```\n\n### Module\n\nYou can use JSON Server as a module:\n\n```javascript\nvar jsonServer = require('json-server')\n\nvar server = jsonServer.create()         // Express server\nserver.use(jsonServer.defaults)          // Default middlewares (logger, public, cors)\nserver.use(jsonServer.router('db.json')) // Express router\n\nserver.listen(3000)\n```\n\nFor an in-memory database, you can pass an object to `jsonServer.route()`.\n\n### Deployment\n\nYou can deploy JSON Server. For example, [JSONPlaceholder](http://jsonplaceholder.typicode.com) is an online fake API powered by JSON Server and running on Heroku.\n\n## Links\n\n### Video\n\n* [Creating Demo APIs with json-server on egghead.io](https://egghead.io/lessons/nodejs-creating-demo-apis-with-json-server)\n\n### Articles\n\n* [Fast prototyping using Restangular and Json-server](http://glebbahmutov.com/blog/fast-prototyping-restangular-and-json-server/)\n* [ng-admin: Add an AngularJS admin GUI to any RESTful API](http://marmelab.com/blog/2014/09/15/easy-backend-for-your-restful-api.html)\n* [how to build quick json REST APIs for development](http://outloudthinking.me/how-to-build-quick-json-rest-apis/)\n\n### Projects\n\n* [Grunt JSON Server](https://github.com/tfiwm/grunt-json-server)\n* [Docker JSON Server](https://github.com/clue/docker-json-server)\n* [JSON Server GUI](https://github.com/naholyr/json-server-gui)\n\n## License\n\nMIT - [Typicode](https://github.com/typicode)\n",
  "readmeFilename": "README.md",
  "_id": "json-server@0.7.2",
  "_from": "json-server@"
}
